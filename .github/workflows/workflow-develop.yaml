name: Deploy for Way Web DEV

on:
  push:
    branches: [ develop ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      WEBHOOK_URL: "https://chat.googleapis.com/v1/spaces/AAQA5qsWFdQ/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=VyWYfeqljUfRTIYU-mvpjOntN4ykR2me8p6Cn_ROEPg"
      GIT_BRANCH: "develop"

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Testar build da imagem Docker
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: way-web:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-openfortivpn-${{ hashFiles('**/workflow-develop.yaml') }}
          restore-keys: |
            ${{ runner.os }}-apt-openfortivpn-
            ${{ runner.os }}-apt-

      - name: Instalar openfortivpn (cached)
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y openfortivpn

      - name: Conectar VPN
        env:
          VPN_SERVER: vpn1.way262.com.br
          VPN_USER: T_carlos.silva
          VPN_PASS: Twaybrasil@262
          VPN_CERT: cb80f98b2d89f9beb935c8c42b8854ab3b456050a82aaa2a7cafee156b133f7e
        run: |
          sudo openfortivpn $VPN_SERVER \
            --username="$VPN_USER" \
            --password="$VPN_PASS" \
            --trusted-cert="$VPN_CERT" > vpn.log 2>&1 &
          sleep 30

      - name: Testar VPN
        run: |
          ping -c 3 10.132.4.128 || exit 1

      - name: Deploy aplicação
        run: |
          sshpass -p "Suporte@#0608" ssh -o StrictHostKeyChecking=no rtech@10.132.4.128 "cd /home/rtech/way-correspondencias-web && ./deploy.sh"

      - name: Send failure message to Google Chat
        if: failure()
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # Preparar payload no formato do webhook
          PAYLOAD=$(cat << EOF
          {
            "text": "Deploy do projeto Way",
            "cards": [
              {
                "sections": [
                  {
                    "widgets": [
                      {
                        "keyValue": {
                          "topLabel": "Projeto",
                          "content": "way-correspondencias-web"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Branch",
                          "content": "$GIT_BRANCH"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Status",
                          "content": "FAILED"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Mensagem",
                          "content": "Deploy falhou na Pipeline CI/CD"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Commit",
                          "content": "$COMMIT_MESSAGE"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          )
          
          # Enviar webhook
          curl -s -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$WEBHOOK_URL"
